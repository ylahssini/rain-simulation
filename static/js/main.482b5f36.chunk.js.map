{"version":3,"sources":["Rain/Particles.ts","Rain/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["drops","RainDrop","p5","position","ySpeed","width","height","this","y","random","createVector","windowWidth","windowHeight","splice","indexOf","fill","rect","x","Rain","setup","elementCanvas","createCanvas","parent","draw","background","i","push","length","drop","fall","show","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAOaA,EAAyB,GAEzBC,EAAb,WAOI,WAAYC,GAAc,yBAN1BA,QAMyB,OALzBC,cAKyB,OAJzBC,YAIyB,OAHzBC,WAGyB,OAFzBC,YAEyB,EACrBC,KAAKL,GAAKA,EAEV,IAAMM,EAAID,KAAKL,GAAGO,QAAQ,KAAM,IAChCF,KAAKJ,SAAWI,KAAKL,GAAGQ,aAAaH,KAAKL,GAAGO,OAAOF,KAAKL,GAAGS,aAAcH,GAC1ED,KAAKH,OAASG,KAAKL,GAAGO,OAAO,EAAG,GAEhCF,KAAKF,MAAQE,KAAKL,GAAGO,OAAO,EAAG,KAC/BF,KAAKD,OAASC,KAAKL,GAAGO,OAAO,GAAI,IAfzC,mDAmBQF,KAAKJ,SAASK,EAAID,KAAKJ,SAASK,EAAID,KAAKH,OACzCG,KAAKH,OAASG,KAAKH,OAAS,IAExBG,KAAKJ,SAASK,EAAID,KAAKL,GAAGU,eAC1BL,KAAKJ,SAASK,EAAID,KAAKL,GAAGO,QAAQ,KAAM,KACxCF,KAAKH,OAASG,KAAKL,GAAGO,OAAO,EAAG,GAEhCT,EAAMa,OAAOb,EAAMc,QAAQP,MAAO,MA1B9C,6BA+BQA,KAAKL,GAAGa,KAAK,GACbR,KAAKL,GAAGc,KAAKT,KAAKJ,SAASc,EAAGV,KAAKJ,SAASK,EAAGD,KAAKF,MAAOE,KAAKD,YAhCxE,KCuBeY,EA3BF,WAmBT,OACI,kBAAC,IAAD,CACIC,MApBR,SAAejB,EAAakB,GACxBlB,EAAGmB,aAAanB,EAAGS,YAAaT,EAAGU,cAAcU,OAAOF,IAoBpDG,KAjBR,SAAcrB,GACVA,EAAGsB,WAAW,KAEd,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAGO,OAAO,IAAKgB,GAAK,EACpCzB,EAAM0B,KAAK,IAAIzB,EAASC,IAG5B,IAAK,IAAIuB,EAAI,EAAGA,EAAIzB,EAAM2B,OAAQF,GAAK,EAAG,CACtC,IAAMG,EAAO5B,EAAMyB,GACnBG,EAAKC,OACLD,EAAKE,YCXFC,MANf,WACI,OACI,kBAAC,EAAD,OCOYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.482b5f36.chunk.js","sourcesContent":["import p5Types from 'p5';\r\n\r\ninterface DropInterface {\r\n    fall: () => void;\r\n    show: () => void;\r\n}\r\n\r\nexport const drops: DropInterface[] = [];\r\n\r\nexport class RainDrop {\r\n    p5: p5Types;\r\n    position: any;\r\n    ySpeed: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(p5: p5Types) {\r\n        this.p5 = p5;\r\n\r\n        const y = this.p5.random(-500, -50);\r\n        this.position = this.p5.createVector(this.p5.random(this.p5.windowWidth), y);\r\n        this.ySpeed = this.p5.random(3, 9);\r\n\r\n        this.width = this.p5.random(1, 1.5);\r\n        this.height = this.p5.random(10, 30);\r\n    }\r\n\r\n    fall() {\r\n        this.position.y = this.position.y + this.ySpeed;\r\n        this.ySpeed = this.ySpeed + 0.15;\r\n\r\n        if (this.position.y > this.p5.windowHeight) {\r\n            this.position.y = this.p5.random(-150, -200);\r\n            this.ySpeed = this.p5.random(3, 9);\r\n\r\n            drops.splice(drops.indexOf(this), 1);\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.p5.fill(0);\r\n        this.p5.rect(this.position.x, this.position.y, this.width, this.height);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Sketch from 'react-p5';\r\nimport p5Types from 'p5';\r\nimport { drops, RainDrop } from './Particles';\r\n\r\nconst Rain = (): React.ReactElement => {\r\n    function setup(p5: p5Types, elementCanvas: Element): void {\r\n        p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(elementCanvas);\r\n    }\r\n\r\n    function draw(p5: p5Types): void {\r\n        p5.background(255);\r\n\r\n        for (let i = 0; i < p5.random(44); i += 1) {\r\n            drops.push(new RainDrop(p5));\r\n        }\r\n\r\n        for (let i = 0; i < drops.length; i += 1) {\r\n            const drop = drops[i];\r\n            drop.fall();\r\n            drop.show();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Sketch\r\n            setup={setup}\r\n            draw={draw}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Rain;\r\n","import React from 'react';\nimport Rain from './Rain';\n\nfunction App() {\n    return (\n        <Rain />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}